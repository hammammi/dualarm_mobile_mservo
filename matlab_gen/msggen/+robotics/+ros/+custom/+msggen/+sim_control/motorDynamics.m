classdef motorDynamics < robotics.ros.Message
    %motorDynamics MATLAB implementation of sim_control/motorDynamics
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sim_control/motorDynamics' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6310bddbb1f6c6ea47b30f0419b43b5a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Omega1
        Omega2
        Omega3
        Omega4
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Omega1', 'Omega2', 'Omega3', 'Omega4'} % List of non-constant message properties
        ROSPropertyList = {'omega1', 'omega2', 'omega3', 'omega4'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = motorDynamics(msg)
            %motorDynamics Construct the message object motorDynamics
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function omega1 = get.Omega1(obj)
            %get.Omega1 Get the value for property Omega1
            omega1 = int32(obj.JavaMessage.getOmega1);
        end
        
        function set.Omega1(obj, omega1)
            %set.Omega1 Set the value for property Omega1
            validateattributes(omega1, {'numeric'}, {'nonempty', 'scalar'}, 'motorDynamics', 'Omega1');
            
            obj.JavaMessage.setOmega1(omega1);
        end
        
        function omega2 = get.Omega2(obj)
            %get.Omega2 Get the value for property Omega2
            omega2 = int32(obj.JavaMessage.getOmega2);
        end
        
        function set.Omega2(obj, omega2)
            %set.Omega2 Set the value for property Omega2
            validateattributes(omega2, {'numeric'}, {'nonempty', 'scalar'}, 'motorDynamics', 'Omega2');
            
            obj.JavaMessage.setOmega2(omega2);
        end
        
        function omega3 = get.Omega3(obj)
            %get.Omega3 Get the value for property Omega3
            omega3 = int32(obj.JavaMessage.getOmega3);
        end
        
        function set.Omega3(obj, omega3)
            %set.Omega3 Set the value for property Omega3
            validateattributes(omega3, {'numeric'}, {'nonempty', 'scalar'}, 'motorDynamics', 'Omega3');
            
            obj.JavaMessage.setOmega3(omega3);
        end
        
        function omega4 = get.Omega4(obj)
            %get.Omega4 Get the value for property Omega4
            omega4 = int32(obj.JavaMessage.getOmega4);
        end
        
        function set.Omega4(obj, omega4)
            %set.Omega4 Set the value for property Omega4
            validateattributes(omega4, {'numeric'}, {'nonempty', 'scalar'}, 'motorDynamics', 'Omega4');
            
            obj.JavaMessage.setOmega4(omega4);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Omega1 = obj.Omega1;
            cpObj.Omega2 = obj.Omega2;
            cpObj.Omega3 = obj.Omega3;
            cpObj.Omega4 = obj.Omega4;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Omega1 = strObj.Omega1;
            obj.Omega2 = strObj.Omega2;
            obj.Omega3 = strObj.Omega3;
            obj.Omega4 = strObj.Omega4;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Omega1 = obj.Omega1;
            strObj.Omega2 = obj.Omega2;
            strObj.Omega3 = obj.Omega3;
            strObj.Omega4 = obj.Omega4;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.sim_control.motorDynamics.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.sim_control.motorDynamics;
            obj.reload(strObj);
        end
    end
end
