classdef noise < robotics.ros.Message
    %noise MATLAB implementation of vehicle_control/noise
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'vehicle_control/noise' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2f349f4baa6bcd53e1435e7ad0c7cf91' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Noise1
        Noise2
        Noise3
        Noise4
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Noise1', 'Noise2', 'Noise3', 'Noise4'} % List of non-constant message properties
        ROSPropertyList = {'noise1', 'noise2', 'noise3', 'noise4'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = noise(msg)
            %noise Construct the message object noise
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function noise1 = get.Noise1(obj)
            %get.Noise1 Get the value for property Noise1
            noise1 = double(obj.JavaMessage.getNoise1);
        end
        
        function set.Noise1(obj, noise1)
            %set.Noise1 Set the value for property Noise1
            validateattributes(noise1, {'numeric'}, {'nonempty', 'scalar'}, 'noise', 'Noise1');
            
            obj.JavaMessage.setNoise1(noise1);
        end
        
        function noise2 = get.Noise2(obj)
            %get.Noise2 Get the value for property Noise2
            noise2 = double(obj.JavaMessage.getNoise2);
        end
        
        function set.Noise2(obj, noise2)
            %set.Noise2 Set the value for property Noise2
            validateattributes(noise2, {'numeric'}, {'nonempty', 'scalar'}, 'noise', 'Noise2');
            
            obj.JavaMessage.setNoise2(noise2);
        end
        
        function noise3 = get.Noise3(obj)
            %get.Noise3 Get the value for property Noise3
            noise3 = double(obj.JavaMessage.getNoise3);
        end
        
        function set.Noise3(obj, noise3)
            %set.Noise3 Set the value for property Noise3
            validateattributes(noise3, {'numeric'}, {'nonempty', 'scalar'}, 'noise', 'Noise3');
            
            obj.JavaMessage.setNoise3(noise3);
        end
        
        function noise4 = get.Noise4(obj)
            %get.Noise4 Get the value for property Noise4
            noise4 = double(obj.JavaMessage.getNoise4);
        end
        
        function set.Noise4(obj, noise4)
            %set.Noise4 Set the value for property Noise4
            validateattributes(noise4, {'numeric'}, {'nonempty', 'scalar'}, 'noise', 'Noise4');
            
            obj.JavaMessage.setNoise4(noise4);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Noise1 = obj.Noise1;
            cpObj.Noise2 = obj.Noise2;
            cpObj.Noise3 = obj.Noise3;
            cpObj.Noise4 = obj.Noise4;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Noise1 = strObj.Noise1;
            obj.Noise2 = strObj.Noise2;
            obj.Noise3 = strObj.Noise3;
            obj.Noise4 = strObj.Noise4;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Noise1 = obj.Noise1;
            strObj.Noise2 = obj.Noise2;
            strObj.Noise3 = obj.Noise3;
            strObj.Noise4 = obj.Noise4;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.vehicle_control.noise.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.vehicle_control.noise;
            obj.reload(strObj);
        end
    end
end
