classdef des_traj < robotics.ros.Message
    %des_traj MATLAB implementation of path_planner/des_traj
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'path_planner/des_traj' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'fb4b9f9037466676e1ed073ddd6d47a3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        XD
        YD
        PhiD
        VxD
        VyD
        VphiD
    end
    
    properties (Constant, Hidden)
        PropertyList = {'PhiD', 'VphiD', 'VxD', 'VyD', 'XD', 'YD'} % List of non-constant message properties
        ROSPropertyList = {'phi_d', 'vphi_d', 'vx_d', 'vy_d', 'x_d', 'y_d'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = des_traj(msg)
            %des_traj Construct the message object des_traj
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function xd = get.XD(obj)
            %get.XD Get the value for property XD
            xd = double(obj.JavaMessage.getXD);
        end
        
        function set.XD(obj, xd)
            %set.XD Set the value for property XD
            validateattributes(xd, {'numeric'}, {'nonempty', 'scalar'}, 'des_traj', 'XD');
            
            obj.JavaMessage.setXD(xd);
        end
        
        function yd = get.YD(obj)
            %get.YD Get the value for property YD
            yd = double(obj.JavaMessage.getYD);
        end
        
        function set.YD(obj, yd)
            %set.YD Set the value for property YD
            validateattributes(yd, {'numeric'}, {'nonempty', 'scalar'}, 'des_traj', 'YD');
            
            obj.JavaMessage.setYD(yd);
        end
        
        function phid = get.PhiD(obj)
            %get.PhiD Get the value for property PhiD
            phid = double(obj.JavaMessage.getPhiD);
        end
        
        function set.PhiD(obj, phid)
            %set.PhiD Set the value for property PhiD
            validateattributes(phid, {'numeric'}, {'nonempty', 'scalar'}, 'des_traj', 'PhiD');
            
            obj.JavaMessage.setPhiD(phid);
        end
        
        function vxd = get.VxD(obj)
            %get.VxD Get the value for property VxD
            vxd = double(obj.JavaMessage.getVxD);
        end
        
        function set.VxD(obj, vxd)
            %set.VxD Set the value for property VxD
            validateattributes(vxd, {'numeric'}, {'nonempty', 'scalar'}, 'des_traj', 'VxD');
            
            obj.JavaMessage.setVxD(vxd);
        end
        
        function vyd = get.VyD(obj)
            %get.VyD Get the value for property VyD
            vyd = double(obj.JavaMessage.getVyD);
        end
        
        function set.VyD(obj, vyd)
            %set.VyD Set the value for property VyD
            validateattributes(vyd, {'numeric'}, {'nonempty', 'scalar'}, 'des_traj', 'VyD');
            
            obj.JavaMessage.setVyD(vyd);
        end
        
        function vphid = get.VphiD(obj)
            %get.VphiD Get the value for property VphiD
            vphid = double(obj.JavaMessage.getVphiD);
        end
        
        function set.VphiD(obj, vphid)
            %set.VphiD Set the value for property VphiD
            validateattributes(vphid, {'numeric'}, {'nonempty', 'scalar'}, 'des_traj', 'VphiD');
            
            obj.JavaMessage.setVphiD(vphid);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.XD = obj.XD;
            cpObj.YD = obj.YD;
            cpObj.PhiD = obj.PhiD;
            cpObj.VxD = obj.VxD;
            cpObj.VyD = obj.VyD;
            cpObj.VphiD = obj.VphiD;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.XD = strObj.XD;
            obj.YD = strObj.YD;
            obj.PhiD = strObj.PhiD;
            obj.VxD = strObj.VxD;
            obj.VyD = strObj.VyD;
            obj.VphiD = strObj.VphiD;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.XD = obj.XD;
            strObj.YD = obj.YD;
            strObj.PhiD = obj.PhiD;
            strObj.VxD = obj.VxD;
            strObj.VyD = obj.VyD;
            strObj.VphiD = obj.VphiD;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.path_planner.des_traj.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.path_planner.des_traj;
            obj.reload(strObj);
        end
    end
end
