classdef VelCommandResponse < robotics.ros.Message
    %VelCommandResponse MATLAB implementation of epos_tutorial/VelCommandResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'epos_tutorial/VelCommandResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '62dd1bf6da19d859801ad5640e8feee2' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        SetVel1
        SetVel2
        SetVel3
        SetVel4
    end
    
    properties (Constant, Hidden)
        PropertyList = {'SetVel1', 'SetVel2', 'SetVel3', 'SetVel4'} % List of non-constant message properties
        ROSPropertyList = {'setVel1', 'setVel2', 'setVel3', 'setVel4'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = VelCommandResponse(msg)
            %VelCommandResponse Construct the message object VelCommandResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function setvel1 = get.SetVel1(obj)
            %get.SetVel1 Get the value for property SetVel1
            setvel1 = int64(obj.JavaMessage.getSetVel1);
        end
        
        function set.SetVel1(obj, setvel1)
            %set.SetVel1 Set the value for property SetVel1
            validateattributes(setvel1, {'numeric'}, {'nonempty', 'scalar'}, 'VelCommandResponse', 'SetVel1');
            
            obj.JavaMessage.setSetVel1(setvel1);
        end
        
        function setvel2 = get.SetVel2(obj)
            %get.SetVel2 Get the value for property SetVel2
            setvel2 = int64(obj.JavaMessage.getSetVel2);
        end
        
        function set.SetVel2(obj, setvel2)
            %set.SetVel2 Set the value for property SetVel2
            validateattributes(setvel2, {'numeric'}, {'nonempty', 'scalar'}, 'VelCommandResponse', 'SetVel2');
            
            obj.JavaMessage.setSetVel2(setvel2);
        end
        
        function setvel3 = get.SetVel3(obj)
            %get.SetVel3 Get the value for property SetVel3
            setvel3 = int64(obj.JavaMessage.getSetVel3);
        end
        
        function set.SetVel3(obj, setvel3)
            %set.SetVel3 Set the value for property SetVel3
            validateattributes(setvel3, {'numeric'}, {'nonempty', 'scalar'}, 'VelCommandResponse', 'SetVel3');
            
            obj.JavaMessage.setSetVel3(setvel3);
        end
        
        function setvel4 = get.SetVel4(obj)
            %get.SetVel4 Get the value for property SetVel4
            setvel4 = int64(obj.JavaMessage.getSetVel4);
        end
        
        function set.SetVel4(obj, setvel4)
            %set.SetVel4 Set the value for property SetVel4
            validateattributes(setvel4, {'numeric'}, {'nonempty', 'scalar'}, 'VelCommandResponse', 'SetVel4');
            
            obj.JavaMessage.setSetVel4(setvel4);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SetVel1 = obj.SetVel1;
            cpObj.SetVel2 = obj.SetVel2;
            cpObj.SetVel3 = obj.SetVel3;
            cpObj.SetVel4 = obj.SetVel4;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SetVel1 = strObj.SetVel1;
            obj.SetVel2 = strObj.SetVel2;
            obj.SetVel3 = strObj.SetVel3;
            obj.SetVel4 = strObj.SetVel4;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SetVel1 = obj.SetVel1;
            strObj.SetVel2 = obj.SetVel2;
            strObj.SetVel3 = obj.SetVel3;
            strObj.SetVel4 = obj.SetVel4;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.epos_tutorial.VelCommandResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.epos_tutorial.VelCommandResponse;
            obj.reload(strObj);
        end
    end
end
